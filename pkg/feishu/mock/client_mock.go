// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	larkcore "github.com/larksuite/oapi-sdk-go/v3/core"
	larkbitable "github.com/larksuite/oapi-sdk-go/v3/service/bitable/v1"
	larkdrive "github.com/larksuite/oapi-sdk-go/v3/service/drive/v1"
	larkim "github.com/larksuite/oapi-sdk-go/v3/service/im/v1"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CopyAPP mocks base method.
func (m *MockClient) CopyAPP(ctx context.Context, req *larkbitable.CopyAppReq, options ...larkcore.RequestOptionFunc) (*larkbitable.CopyAppResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyAPP", varargs...)
	ret0, _ := ret[0].(*larkbitable.CopyAppResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyAPP indicates an expected call of CopyAPP.
func (mr *MockClientMockRecorder) CopyAPP(ctx, req interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyAPP", reflect.TypeOf((*MockClient)(nil).CopyAPP), varargs...)
}

// CreateAPP mocks base method.
func (m *MockClient) CreateAPP(ctx context.Context, req *larkbitable.CreateAppReq, options ...larkcore.RequestOptionFunc) (*larkbitable.CreateAppResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAPP", varargs...)
	ret0, _ := ret[0].(*larkbitable.CreateAppResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAPP indicates an expected call of CreateAPP.
func (mr *MockClientMockRecorder) CreateAPP(ctx, req interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPP", reflect.TypeOf((*MockClient)(nil).CreateAPP), varargs...)
}

// CreateAppTableRecord mocks base method.
func (m *MockClient) CreateAppTableRecord(ctx context.Context, req *larkbitable.CreateAppTableRecordReq, options ...larkcore.RequestOptionFunc) (*larkbitable.CreateAppTableRecordResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppTableRecord", varargs...)
	ret0, _ := ret[0].(*larkbitable.CreateAppTableRecordResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppTableRecord indicates an expected call of CreateAppTableRecord.
func (mr *MockClientMockRecorder) CreateAppTableRecord(ctx, req interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppTableRecord", reflect.TypeOf((*MockClient)(nil).CreateAppTableRecord), varargs...)
}

// GetAppTableRecord mocks base method.
func (m *MockClient) GetAppTableRecord(ctx context.Context, req *larkbitable.SearchAppTableRecordReq, options ...larkcore.RequestOptionFunc) (*larkbitable.SearchAppTableRecordResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppTableRecord", varargs...)
	ret0, _ := ret[0].(*larkbitable.SearchAppTableRecordResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppTableRecord indicates an expected call of GetAppTableRecord.
func (mr *MockClientMockRecorder) GetAppTableRecord(ctx, req interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppTableRecord", reflect.TypeOf((*MockClient)(nil).GetAppTableRecord), varargs...)
}

// GetPhotoUrl mocks base method.
func (m *MockClient) GetPhotoUrl(ctx context.Context, req *larkdrive.BatchGetTmpDownloadUrlMediaReq, options ...larkcore.RequestOptionFunc) (*larkdrive.BatchGetTmpDownloadUrlMediaResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPhotoUrl", varargs...)
	ret0, _ := ret[0].(*larkdrive.BatchGetTmpDownloadUrlMediaResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotoUrl indicates an expected call of GetPhotoUrl.
func (mr *MockClientMockRecorder) GetPhotoUrl(ctx, req interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoUrl", reflect.TypeOf((*MockClient)(nil).GetPhotoUrl), varargs...)
}

// SendNotice mocks base method.
func (m *MockClient) SendNotice(ctx context.Context, req *larkim.CreateMessageReq, options ...larkcore.RequestOptionFunc) (*larkim.CreateMessageResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendNotice", varargs...)
	ret0, _ := ret[0].(*larkim.CreateMessageResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotice indicates an expected call of SendNotice.
func (mr *MockClientMockRecorder) SendNotice(ctx, req interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotice", reflect.TypeOf((*MockClient)(nil).SendNotice), varargs...)
}
